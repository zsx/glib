# vim: ft=python expandtab
import os
import subprocess

Import('env')

env_test = env.Clone()
env_test.Append(CLFAGS = env_test['DEBUG_CFLAGS'])
env_test.Append(CPPDEFINES = ['ENABLE_REGEX'] + env_test['DEBUG_CPPDEFINES'])
env_test.Append(CPPPATH=['#', '#glib', '#gmodule'])
env_test.Append(LIBS=['libglib-2.0', 'libgthread-2.0', 'libgmodule-2.0', 'user32'])
env_test.Append(LIBPATH=['#glib', '#gthread', '#gmodule'])

tests = ["scannerapi",
         "testglib",
         "testingbase64"] + \
        ["atomic-test",
         "base64-test",
         "bit-test",
         #"cxx-test.C",
         "checksum-test",
         "child-test",
         "completion-test",
         "convert-test",
         "date-test",
         "dirname-test",
         "file-test",
         "env-test",
         "gio-test",
         "hash-test",
         "iochannel-test",
         "list-test",
         "mainloop-test",
         "mapping-test",
         #c99 "markup-collect",
         "markup-escape-test",
         "module-test",
         "node-test",
         #c99 "onceinit",
         "patterntest",
         "queue-test",
         "asyncqueue-test",
         "qsort-test",
         "relation-test",
         "sequence-test",
         "shell-test",
         "slist-test",
         "slice-test",
         "slice-color",
         #unistd "slice-concurrent",
         "slice-threadinit",
         "spawn-test",
         "spawn-test-win32-gui",
         "thread-test",
         "threadpool-test",
         "tree-test",
         "type-test",
         "unicode-caseconv",
         "unicode-encoding",
         "utf8-validate",
         "utf8-pointer",
         "uri-test",
         "regex-test"]
for i in tests:
    e = env_test.Clone(PDB = i + '.pdb')
    if i == 'slice-test':
        e.Program(i, [i + '.c', 'memchunks.c'])
    else:
        e.Program(i, i + '.c')

env_test['ENV']['PATH'] += ';' + ';'.join(['glib', 'gthread', 'gobject', os.path.join('win32', 'libintl-proxy')])
env_test['ENV']['srcdir'] = os.path.dirname('tests/') #for iochannel-test

for x in tests:
    if x not in ['checksum-test', 
                 'file-test', 
                 'mapping-test', 
                 'module-test', 
                 'child-test', 
                 'spawn-test' #need to run in the 'tests' directory, so disable it right now
                 ]:
        env_test.AlwaysBuild(env_test.Alias('test', [], os.path.join('tests', x + '.exe')))

env_test.SharedLibrary('libmoduletestplugin_a.c')
env_test.SharedLibrary('libmoduletestplugin_b.c')

SConscript(['gobject/SConscript',
            'refcount/SConscript'], 
            exports = "env_test")
